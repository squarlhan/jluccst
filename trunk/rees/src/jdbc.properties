## Oracle
#jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
#jdbc.url=jdbc:oracle:thin:@192.168.15.3:1521:jjylxt
#jdbc.username=cbit
#jdbc.password=cbit

## SQL Server
#jdbc.driverClassName=net.sourceforge.jtds.jdbc.Driver
#jdbc.url=jdbc:jtds:sqlserver://localhost:1433/test
#jdbc.username=sa
#jdbc.password=pswd

## MySQL
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc\:mysql\://127.0.0.1\:3306/rees?useUnicode\=true&amp;characterEncoding\=utf-8 
jdbc.username=root
jdbc.password=1234

##############################
### Hibernate Properties   ###
##############################
#方言
#hibernate.dialect=org.hibernate.dialect.SQLServerDialect
#MySQL方言
hibernate.dialect=org.hibernate.dialect.MySQLDialect
#在SessionFactory创建时，自动将数据库schema的DDL导出到数据库. 使用 create-drop时,在显式关闭SessionFactory时，将drop掉数据库schema. 取值update | create | create-drop
hibernate.hbm2ddl.auto=update
#输出所有SQL语句到控制台.取值true | false
hibernate.show_sql=true
#在log和console中打印出更漂亮的sql. 取值true | false
hibernate.format_sql=true
#在生成的SQL中, 将给定的schema/tablespace附加于非全限定名的表名上. 取值SCHEMA_NAME
hibernate.default_schema=dbo
#在生成的SQL中, 将给定的catalog附加于没全限定名的表名上. 取值CATALOG_NAME
hibernate.default_catalog=
#为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取. 取值 建议在0到3之间取值
hibernate.max_fetch_depth=2
#为Hibernate关联的批量抓取设置默认数量. 取值 建议的取值为4, 8, 和16
hibernate.default_batch_fetch_size=16
#强制Hibernate按照被更新数据的主键，为SQL更新排序。这么做将减少在高并发系统中事务的死锁。 取值true | false
hibernate.order_updates=true
#如果开启, Hibernate将收集有助于性能调节的统计数据. 取值true | false
hibernate.generate_statistics=true
#如果开启, 在对象被删除时生成的标识属性将被重设为默认值. 取值true | false
hibernate.use_identifer_rollback=true
#如果开启, Hibernate将在SQL中生成有助于调试的注释信息, 默认值为false. 取值true | false
hibernate.use_sql_comments=true
#允许查询缓存, 个别查询仍然需要被设置为可缓存的. 取值true|false
hibernate.cache.use_query_cache=true
#非零值，指定JDBC抓取数量的大小 (调用Statement.setFetchSize()).
hibernate.jdbc.fetch_size=50
#非零值，允许Hibernate使用JDBC2的批量更新. 取值 建议取5到30之间的值
hibernate.jdbc.batch_size=0
#在JDBC读写binary (二进制)或serializable (可序列化) 的类型时使用流(stream)(系统级属性). 取值true | false
use_streams_for_binary=true
#自定义的CacheProvider的类名. 
hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
#能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存. 取值true|false
hibernate.cache.use_second_level_cache=true
#自定义的实现QueryCache接口的类名, 默认为内建的StandardQueryCache. 
hibernate.query.factory_class=org.hibernate.cache.StandardQueryCache
#指定Hibernate在何时释放JDBC连接. 默认情况下,直到Session被显式关闭或被断开连接时,才会释放JDBC连接
hibernate.connection.release_mode=auto   
#开启CGLIB来替代运行时反射机制(系统级属性). 反射机制有时在除错时比较有用. 注意即使关闭这个优化, Hibernate还是需要CGLIB. 
#你不能在hibernate.cfg.xml中设置此属性. 取值true | false
hibernate.cglib.use_reflection_optimizer=true



##############################
### Proxool Connection Pool###
##############################
#数据源的别名
proxool.alias=pool_DB_Name
#连接池中可用的连接数量.如果当前的连接池中的连接少于这个数值.新的连接将被建立(假设没有超过最大可用数).默认值是0
proxool.prototypeCount=5
#最小的数据库连接数，默认是0
proxool.minimumConnectionCount=0
#最大的数据库连接数.默认是15
proxool.maximumConnectionCount=0
#如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略。
#一般mysql可用select SYSDATE ，Oracle可用 select sysdate from dual 或者 select 1 from dual
proxool.houseKeepingTestSql =select 1
#任一时刻，可以（同时）建立的最大连接数,默认值是 10,当数据库并发连接可能会比较高的应用，这个值应该适当的设大一点.
proxool.simultaneousBuildThrottle=50
#如果一个线程活动时间超过这个数值，线程会被杀死。所以要确保这个数值设置得比最慢的响应时间长。
#默认是5分钟。守护进程会把连接池中多余的可用线程（未用的、超过这个时间的）杀死，最终保留的连接数量就是minimumConnectionCount规定的数量。
#守护进程会根据houseKeepingSleepTime参数设置的时间隔定时检查。
proxool.maximumActiveTime=300000
#这可以帮助我们确定连接池的状态,连接数少还是多或超载。只要至少有一个连接已开始在此值(毫秒)内,
#或者有一些多余的可用连接,那么我们假设连接池是开启的。默认为60秒
proxool.recentlyStartedThreshold=60000
#这个参数帮助我们确定连接池的状态，如果在这个时间阀值内（单位为毫秒）拒绝了一个连接，就认为是过载了。默认值为60秒。
proxool.overloadWithoutRefusalLifetime=60000

#----proxool-0.9.1.jar有Debug一下属性不能设置-------#
#一个连接最大的存活时间（毫秒为单位），超过这个时间，连接会被杀死。默认值是4小时。
proxool.maximumConnectionLifetime=14400000
#proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒)
#house keeper 保留线程处于睡眠状态的最长时间,house keeper 的职责就是检查各个连接的状态,并判断是否需要销毁或者创建.
proxool.houseKeepingSleepTime=90000

